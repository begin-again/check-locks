name: Auto Tag Release

on:
  push:
    branches:
      - main  # Runs when code is pushed or merged into main

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to get all tags

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "TAG=$latest_tag" >> $GITHUB_ENV

      - name: Get Latest Commit Message
        id: get_commit_msg
        run: |
          commit_msg=$(git log -1 --pretty=%B)
          echo "Commit message: $commit_msg"
          echo "COMMIT_MSG=$commit_msg" >> $GITHUB_ENV

      - name: Determine Version Bump Type
        id: bump_type
        run: |
          if echo "$COMMIT_MSG" | grep -q -i "BREAKING CHANGE\|major:"; then
            echo "BUMP_TYPE=major" >> $GITHUB_ENV
          elif echo "$COMMIT_MSG" | grep -q -i "feat:"; then
            echo "BUMP_TYPE=minor" >> $GITHUB_ENV
          else
            echo "BUMP_TYPE=patch" >> $GITHUB_ENV
          fi
          echo "Bump type: $BUMP_TYPE"

      - name: Calculate Next Version
        id: bump_version
        run: |
          latest=${TAG}
          echo "Latest tag: $latest"

          # Extract version parts
          major=$(echo $latest | cut -d. -f1 | sed 's/v//')
          minor=$(echo $latest | cut -d. -f2)
          patch=$(echo $latest | cut -d. -f3)

          # Increment based on commit message type
          if [[ "$BUMP_TYPE" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$BUMP_TYPE" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="v${major}.${minor}.${patch}"
          echo "New version: $new_version"
          echo "NEW_TAG=$new_version" >> $GITHUB_ENV

      - name: Create and Push New Tag
        run: |
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display New Tag
        run: |
          echo "Tagged new release: $NEW_TAG"
